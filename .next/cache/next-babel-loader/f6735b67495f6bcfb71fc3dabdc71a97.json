{"ast":null,"code":"var _jsxFileName = \"/data/Projects/pokedex-tutorial/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nimport Card from '../components/Card';\nimport getPokemonCards from '../logic/pokemonCards';\nimport getPokemonTypes from '../logic/getPokemonTypes';\nlet persistentTypes;\n\nconst Index = ({\n  pokemonCards,\n  pokemonTypes\n}) => {\n  if (!persistentTypes) persistentTypes = pokemonTypes;\n  const {\n    0: selectedTypes,\n    1: setSelectedTypes\n  } = useState(persistentTypes);\n  persistentTypes = selectedTypes;\n\n  const togglePokemonType = (type, ev) => {\n    if (ev.ctrlKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes(types => [...types].filter(item => item !== type));\n      } else {\n        setSelectedTypes(types => {\n          const newTypes = [...types];\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(() => [type]);\n    }\n  };\n\n  const selectedPokemonCards = pokemonCards.filter(card => card.types.some(item => selectedTypes.includes(item)));\n  /* const selectedPokemonCards = (): PokemonCard[] =>{\n   const selected: PokemonCard[] = [];\n      pokemonCards.forEach(pokemon => {\n     pokemon.types.forEach(element => {\n       if(!selectedTypes.includes(element))\n       selected.push(pokemon);\n     });\n   });\n      return selected;\n  }; */\n\n  const selectAll = () => {\n    setSelectedTypes([...pokemonTypes]);\n  };\n\n  const selectNone = () => {\n    setSelectedTypes([]); // persistentTypes = [];\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"BinPar Pokedex\")), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"BinPar Pokedex\"), __jsx(\"p\", {\n    className: \"pokemonTypes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    id: \"types\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, pokemonTypes.map(type => __jsx(\"button\", {\n    onClick: ev => togglePokemonType(type, ev),\n    className: selectedTypes.includes(type) ? 'on' : 'off',\n    type: \"button\",\n    key: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, type)), __jsx(\"button\", {\n    onClick: selectAll,\n    type: \"button\",\n    className: \"special\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"All\"), __jsx(\"button\", {\n    onClick: selectNone,\n    type: \"button\",\n    className: \"special\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"None\"))), __jsx(\"div\", {\n    id: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, selectedPokemonCards.map(card => __jsx(Card, {\n    key: card.id,\n    pokemonCard: card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport const getStaticProps = async () => {\n  const pokemonCards = await getPokemonCards();\n  const pokemonTypes = await getPokemonTypes();\n  return {\n    props: {\n      pokemonCards,\n      pokemonTypes\n    }\n  };\n};\nexport default Index;","map":{"version":3,"sources":["/data/Projects/pokedex-tutorial/pages/index.tsx"],"names":["React","useState","Head","Card","getPokemonCards","getPokemonTypes","persistentTypes","Index","pokemonCards","pokemonTypes","selectedTypes","setSelectedTypes","togglePokemonType","type","ev","ctrlKey","includes","types","filter","item","newTypes","push","selectedPokemonCards","card","some","selectAll","selectNone","map","id","getStaticProps","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Head from 'next/head';\nimport { GetStaticProps } from 'next';\nimport { PokemonCard } from '../model/pokemon';\nimport Card from '../components/Card';\nimport getPokemonCards from '../logic/pokemonCards';\nimport getPokemonTypes from '../logic/getPokemonTypes';\n\ninterface IndexProps {\n  pokemonCards: PokemonCard[];\n  pokemonTypes: string[];\n}\n\nlet persistentTypes: string[];\n\nconst Index = ({ pokemonCards, pokemonTypes }: IndexProps): JSX.Element => {\n  \n  if (!persistentTypes)\n    persistentTypes = pokemonTypes;\n  const [selectedTypes, setSelectedTypes] = useState<string[]>(persistentTypes);\n  persistentTypes = selectedTypes;\n\n  const togglePokemonType = (type: string, ev: React.MouseEvent): void => {\n    if (ev.ctrlKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes((types) => [...types].filter((item) => item !== type));\n      } else {\n        setSelectedTypes((types) => {\n          const newTypes = [...types];\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(() => [type]);\n    }\n  };\n\n  const selectedPokemonCards = pokemonCards.filter((card) =>\n    card.types.some((item) => selectedTypes.includes(item)),\n  );\n\n   /* const selectedPokemonCards = (): PokemonCard[] =>{\n    const selected: PokemonCard[] = [];\n  \n    pokemonCards.forEach(pokemon => {\n      pokemon.types.forEach(element => {\n        if(!selectedTypes.includes(element))\n        selected.push(pokemon);\n      });\n    });\n  \n    return selected;\n  }; */\n  \nconst selectAll = (): void =>{\n  setSelectedTypes([...pokemonTypes]);\n};\nconst selectNone = (): void =>{\n\n  setSelectedTypes([]);\n  // persistentTypes = [];\n};\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title>BinPar Pokedex</title>\n      </Head>\n      <main>\n        <h1>BinPar Pokedex</h1>\n        <p className=\"pokemonTypes\">\n          <div id=\"types\">\n            {pokemonTypes.map((type) => (\n              <button\n                onClick={(ev): void => togglePokemonType(type, ev)}\n                className={selectedTypes.includes(type) ? 'on' : 'off'}\n                type=\"button\"\n                key={type}\n              >\n                {type}\n              </button>\n          ))}          \n            <button\n              onClick={selectAll}\n              type=\"button\"\n              className=\"special\"\n            >\n              All\n            </button>\n            <button\n              onClick={selectNone}\n              type=\"button\"\n              className=\"special\"\n            >\n              None\n            </button>\n          </div>\n        </p>\n        <div id=\"app\">\n          {selectedPokemonCards.map((card) => (\n            <Card key={card.id} pokemonCard={card} />\n          ))}\n        </div>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport const getStaticProps: GetStaticProps<IndexProps> = async () => {\n  const pokemonCards = await getPokemonCards();\n  const pokemonTypes = await getPokemonTypes();\n  return {\n    props: {\n      pokemonCards,\n      pokemonTypes,\n    },\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}
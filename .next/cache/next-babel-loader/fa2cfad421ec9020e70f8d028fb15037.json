{"ast":null,"code":"var _jsxFileName = \"/data/Projects/pokedex-tutorial/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nimport Card from '../components/Card';\nimport getPokemonCards from '../logic/pokemonCards';\nimport getPokemonTypes from '../logic/getPokemonTypes';\nimport { getLastTypes, setLastTypes } from '../logic/persistentTypes';\n\nconst Index = ({\n  pokemonCards,\n  pokemonTypes\n}) => {\n  if (!getLastTypes()) {\n    setLastTypes(pokemonTypes);\n  }\n\n  const {\n    0: selectedTypes,\n    1: setSelectedTypes\n  } = useState(getLastTypes());\n  setLastTypes(selectedTypes);\n\n  const togglePokemonType = (type, ev) => {\n    if (ev.ctrlKey || ev.shiftKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes(types => [...types].filter(item => item !== type));\n      } else {\n        setSelectedTypes(types => {\n          const newTypes = [...types];\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(() => [type]);\n    }\n  };\n\n  const selectedPokemonCards = pokemonCards.filter(card => card.types.some(item => selectedTypes.includes(item)));\n\n  const selectAll = () => {\n    setSelectedTypes([...pokemonTypes]);\n  };\n\n  const selectNone = () => {\n    setSelectedTypes([]);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"BinPar Pokedex\")), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"BinPar Pokedex\"), __jsx(\"p\", {\n    className: \"pokemonTypes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, pokemonTypes.map(type => __jsx(\"button\", {\n    onClick: ev => togglePokemonType(type, ev),\n    className: selectedTypes.includes(type) ? 'on' : 'off',\n    type: \"button\",\n    key: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, type)), __jsx(\"button\", {\n    onClick: selectAll,\n    type: \"button\",\n    className: \"special\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"All\"), __jsx(\"button\", {\n    onClick: selectNone,\n    type: \"button\",\n    className: \"special\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"None\")), __jsx(\"div\", {\n    id: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, selectedPokemonCards.map(card => __jsx(Card, {\n    key: card.id,\n    pokemonCard: card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport const getStaticProps = async () => {\n  const pokemonCards = await getPokemonCards();\n  const pokemonTypes = await getPokemonTypes();\n  return {\n    props: {\n      pokemonCards,\n      pokemonTypes\n    }\n  };\n};\nexport default Index;","map":{"version":3,"sources":["/data/Projects/pokedex-tutorial/pages/index.tsx"],"names":["React","useState","Head","Card","getPokemonCards","getPokemonTypes","getLastTypes","setLastTypes","Index","pokemonCards","pokemonTypes","selectedTypes","setSelectedTypes","togglePokemonType","type","ev","ctrlKey","shiftKey","includes","types","filter","item","newTypes","push","selectedPokemonCards","card","some","selectAll","selectNone","map","id","getStaticProps","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Head from 'next/head';\nimport { GetStaticProps } from 'next';\nimport { PokemonCard } from '../model/pokemon';\nimport Card from '../components/Card';\nimport getPokemonCards from '../logic/pokemonCards';\nimport getPokemonTypes from '../logic/getPokemonTypes';\nimport { getLastTypes, setLastTypes } from '../logic/persistentTypes';\n\ninterface IndexProps {\n  pokemonCards: PokemonCard[];\n  pokemonTypes: string[];\n}\n\nconst Index = ({ pokemonCards, pokemonTypes }: IndexProps): JSX.Element => {\n  if (!getLastTypes()) {\n    setLastTypes(pokemonTypes);\n  }\n  const [selectedTypes, setSelectedTypes] = useState<string[]>(getLastTypes());\n  setLastTypes(selectedTypes);\n\n  const togglePokemonType = (type: string, ev: React.MouseEvent): void => {\n    if (ev.ctrlKey || ev.shiftKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes((types) => [...types].filter((item) => item !== type));\n      } else {\n        setSelectedTypes((types) => {\n          const newTypes = [...types];\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(() => [type]);\n    }\n  };\n\n  const selectedPokemonCards = pokemonCards.filter((card) =>\n    card.types.some((item) => selectedTypes.includes(item)),\n  );\n\n  const selectAll = (): void => {\n    setSelectedTypes([...pokemonTypes]);\n  };\n\n  const selectNone = (): void => {\n    setSelectedTypes([]);\n  };\n  return (\n    <React.Fragment>\n      <Head>\n        <title>BinPar Pokedex</title>\n      </Head>\n      <main>\n        <h1>BinPar Pokedex</h1>\n        <p className=\"pokemonTypes\">\n          {pokemonTypes.map((type) => (\n            <button\n              onClick={(ev): void => togglePokemonType(type, ev)}\n              className={selectedTypes.includes(type) ? 'on' : 'off'}\n              type=\"button\"\n              key={type}\n            >\n              {type}\n            </button>\n          ))}\n          <button\n            onClick={selectAll}\n            type=\"button\"\n            className=\"special\"\n          >\n            All\n          </button>\n          <button\n            onClick={selectNone}\n            type=\"button\"\n            className=\"special\"\n          >\n            None\n          </button>\n        </p>\n        <div id=\"app\">\n          {selectedPokemonCards.map((card) => (\n            <Card key={card.id} pokemonCard={card} />\n          ))}\n        </div>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport const getStaticProps: GetStaticProps<IndexProps> = async () => {\n  const pokemonCards = await getPokemonCards();\n  const pokemonTypes = await getPokemonTypes();\n  return {\n    props: {\n      pokemonCards,\n      pokemonTypes,\n    },\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}
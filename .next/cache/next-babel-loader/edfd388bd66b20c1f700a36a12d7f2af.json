{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/data/Projects/pokedex-tutorial/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nimport Card from '../components/Card';\nvar persistentTypes;\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var pokemonCards = _ref.pokemonCards,\n      pokemonTypes = _ref.pokemonTypes;\n  if (!persistentTypes) persistentTypes = pokemonTypes;\n\n  var _useState = useState(persistentTypes),\n      selectedTypes = _useState[0],\n      setSelectedTypes = _useState[1];\n\n  persistentTypes = selectedTypes;\n\n  var togglePokemonType = function togglePokemonType(type, ev) {\n    if (ev.ctrlKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes(function (types) {\n          return _toConsumableArray(types).filter(function (item) {\n            return item !== type;\n          });\n        });\n      } else {\n        setSelectedTypes(function (types) {\n          var newTypes = _toConsumableArray(types);\n\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(function () {\n        return [type];\n      });\n    }\n  };\n\n  var selectedPokemonCards = pokemonCards.filter(function (card) {\n    return card.types.some(function (item) {\n      return selectedTypes.includes(item);\n    });\n  });\n  /* const selectedPokemonCards = (): PokemonCard[] =>{\n   const selected: PokemonCard[] = [];\n      pokemonCards.forEach(pokemon => {\n     pokemon.types.forEach(element => {\n       if(!selectedTypes.includes(element))\n       selected.push(pokemon);\n     });\n   });\n      return selected;\n  }; */\n\n  var selectAll = function selectAll() {\n    setSelectedTypes(_toConsumableArray(pokemonTypes));\n  };\n\n  var selectNone = function selectNone() {\n    setSelectedTypes([]); // persistentTypes = [];\n  };\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"BinPar Pokedex\")), __jsx(\"main\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"BinPar Pokedex\"), __jsx(\"p\", {\n    className: \"pokemonTypes\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    id: \"types\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, pokemonTypes.map(function (type) {\n    return __jsx(\"button\", {\n      onClick: function onClick(ev) {\n        return togglePokemonType(type, ev);\n      },\n      className: selectedTypes.includes(type) ? 'on' : 'off',\n      type: \"button\",\n      key: type,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, type);\n  }), __jsx(\"button\", {\n    onClick: selectAll,\n    type: \"button\",\n    className: \"special\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"All\"), __jsx(\"button\", {\n    onClick: selectNone,\n    type: \"button\",\n    className: \"special\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"None\"))), __jsx(\"div\", {\n    id: \"app\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, selectedPokemonCards.map(function (card) {\n    return __jsx(Card, {\n      key: card.id,\n      pokemonCard: card,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    });\n  }))));\n};\n\n_s(Index, \"6UMhlkIZUcL0EVX0Y2xdOkVmXbg=\");\n\n_c = Index;\nexport var __N_SSG = true;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/data/Projects/pokedex-tutorial/pages/index.tsx"],"names":["React","useState","Head","Card","persistentTypes","Index","pokemonCards","pokemonTypes","selectedTypes","setSelectedTypes","togglePokemonType","type","ev","ctrlKey","includes","types","filter","item","newTypes","push","selectedPokemonCards","card","some","selectAll","selectNone","map","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Head from 'next/head';\nimport { GetStaticProps } from 'next';\nimport { PokemonCard } from '../model/pokemon';\nimport Card from '../components/Card';\nimport getPokemonCards from '../logic/pokemonCards';\nimport getPokemonTypes from '../logic/getPokemonTypes';\n\ninterface IndexProps {\n  pokemonCards: PokemonCard[];\n  pokemonTypes: string[];\n}\n\nlet persistentTypes: string[];\n\nconst Index = ({ pokemonCards, pokemonTypes }: IndexProps): JSX.Element => {\n  \n  if (!persistentTypes)\n    persistentTypes = pokemonTypes;\n  const [selectedTypes, setSelectedTypes] = useState<string[]>(persistentTypes);\n  persistentTypes = selectedTypes;\n\n  const togglePokemonType = (type: string, ev: React.MouseEvent): void => {\n    if (ev.ctrlKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes((types) => [...types].filter((item) => item !== type));\n      } else {\n        setSelectedTypes((types) => {\n          const newTypes = [...types];\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(() => [type]);\n    }\n  };\n\n  const selectedPokemonCards = pokemonCards.filter((card) =>\n    card.types.some((item) => selectedTypes.includes(item)),\n  );\n\n   /* const selectedPokemonCards = (): PokemonCard[] =>{\n    const selected: PokemonCard[] = [];\n  \n    pokemonCards.forEach(pokemon => {\n      pokemon.types.forEach(element => {\n        if(!selectedTypes.includes(element))\n        selected.push(pokemon);\n      });\n    });\n  \n    return selected;\n  }; */\n  \nconst selectAll = (): void =>{\n  setSelectedTypes([...pokemonTypes]);\n};\nconst selectNone = (): void =>{\n\n  setSelectedTypes([]);\n  // persistentTypes = [];\n};\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title>BinPar Pokedex</title>\n      </Head>\n      <main>\n        <h1>BinPar Pokedex</h1>\n        <p className=\"pokemonTypes\">\n          <div id=\"types\">\n            {pokemonTypes.map((type) => (\n              <button\n                onClick={(ev): void => togglePokemonType(type, ev)}\n                className={selectedTypes.includes(type) ? 'on' : 'off'}\n                type=\"button\"\n                key={type}\n              >\n                {type}\n              </button>\n          ))}          \n            <button\n              onClick={selectAll}\n              type=\"button\"\n              className=\"special\"\n            >\n              All\n            </button>\n            <button\n              onClick={selectNone}\n              type=\"button\"\n              className=\"special\"\n            >\n              None\n            </button>\n          </div>\n        </p>\n        <div id=\"app\">\n          {selectedPokemonCards.map((card) => (\n            <Card key={card.id} pokemonCard={card} />\n          ))}\n        </div>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport const getStaticProps: GetStaticProps<IndexProps> = async () => {\n  const pokemonCards = await getPokemonCards();\n  const pokemonTypes = await getPokemonTypes();\n  return {\n    props: {\n      pokemonCards,\n      pokemonTypes,\n    },\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}
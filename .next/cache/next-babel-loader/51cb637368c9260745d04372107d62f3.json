{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/data/Projects/pokedex-tutorial/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nimport Card from '../components/Card';\nimport { getLastTypes, setLastTypes } from '../logic/persistentTypes';\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var pokemonCards = _ref.pokemonCards,\n      pokemonTypes = _ref.pokemonTypes;\n\n  if (!getLastTypes()) {\n    setLastTypes(pokemonTypes);\n  }\n\n  var _useState = useState(getLastTypes()),\n      selectedTypes = _useState[0],\n      setSelectedTypes = _useState[1];\n\n  setLastTypes(selectedTypes);\n\n  var togglePokemonType = function togglePokemonType(type, ev) {\n    if (ev.ctrlKey || ev.shiftKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes(function (types) {\n          return _toConsumableArray(types).filter(function (item) {\n            return item !== type;\n          });\n        });\n      } else {\n        setSelectedTypes(function (types) {\n          var newTypes = _toConsumableArray(types);\n\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(function () {\n        return [type];\n      });\n    }\n  };\n\n  var selectedPokemonCards = pokemonCards.filter(function (card) {\n    return card.types.some(function (item) {\n      return selectedTypes.includes(item);\n    });\n  });\n\n  var selectAll = function selectAll() {\n    setSelectedTypes(_toConsumableArray(pokemonTypes));\n  };\n\n  var selectNone = function selectNone() {\n    setSelectedTypes([]);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"BinPar Pokedex\")), __jsx(\"main\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"BinPar Pokedex\"), __jsx(\"p\", {\n    className: \"pokemonTypes\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, pokemonTypes.map(function (type) {\n    return __jsx(\"button\", {\n      onClick: function onClick(ev) {\n        return togglePokemonType(type, ev);\n      },\n      className: selectedTypes.includes(type) ? 'on' : 'off',\n      type: \"button\",\n      key: type,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, type);\n  }), __jsx(\"button\", {\n    onClick: selectAll,\n    type: \"button\",\n    className: \"special\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"All\"), __jsx(\"button\", {\n    onClick: selectNone,\n    type: \"button\",\n    className: \"special\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"None\")), __jsx(\"div\", {\n    id: \"app\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, selectedPokemonCards.map(function (card) {\n    return __jsx(Card, {\n      key: card.id,\n      pokemonCard: card,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    });\n  }))));\n};\n\n_s(Index, \"uWHGowbzgbF9aiV6eK/LpH2B5GU=\");\n\n_c = Index;\nexport var __N_SSG = true;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/data/Projects/pokedex-tutorial/pages/index.tsx"],"names":["React","useState","Head","Card","getLastTypes","setLastTypes","Index","pokemonCards","pokemonTypes","selectedTypes","setSelectedTypes","togglePokemonType","type","ev","ctrlKey","shiftKey","includes","types","filter","item","newTypes","push","selectedPokemonCards","card","some","selectAll","selectNone","map","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Head from 'next/head';\nimport { GetStaticProps } from 'next';\nimport { PokemonCard } from '../model/pokemon';\nimport Card from '../components/Card';\nimport getPokemonCards from '../logic/pokemonCards';\nimport getPokemonTypes from '../logic/getPokemonTypes';\nimport { getLastTypes, setLastTypes } from '../logic/persistentTypes';\n\ninterface IndexProps {\n  pokemonCards: PokemonCard[];\n  pokemonTypes: string[];\n}\n\nconst Index = ({ pokemonCards, pokemonTypes }: IndexProps): JSX.Element => {\n  if (!getLastTypes()) {\n    setLastTypes(pokemonTypes);\n  }\n  const [selectedTypes, setSelectedTypes] = useState<string[]>(getLastTypes());\n  setLastTypes(selectedTypes);\n\n  const togglePokemonType = (type: string, ev: React.MouseEvent): void => {\n    if (ev.ctrlKey || ev.shiftKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes((types) => [...types].filter((item) => item !== type));\n      } else {\n        setSelectedTypes((types) => {\n          const newTypes = [...types];\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(() => [type]);\n    }\n  };\n\n  const selectedPokemonCards = pokemonCards.filter((card) =>\n    card.types.some((item) => selectedTypes.includes(item)),\n  );\n\n  const selectAll = (): void => {\n    setSelectedTypes([...pokemonTypes]);\n  };\n\n  const selectNone = (): void => {\n    setSelectedTypes([]);\n  };\n  return (\n    <React.Fragment>\n      <Head>\n        <title>BinPar Pokedex</title>\n      </Head>\n      <main>\n        <h1>BinPar Pokedex</h1>\n        <p className=\"pokemonTypes\">\n          {pokemonTypes.map((type) => (\n            <button\n              onClick={(ev): void => togglePokemonType(type, ev)}\n              className={selectedTypes.includes(type) ? 'on' : 'off'}\n              type=\"button\"\n              key={type}\n            >\n              {type}\n            </button>\n          ))}\n          <button\n            onClick={selectAll}\n            type=\"button\"\n            className=\"special\"\n          >\n            All\n          </button>\n          <button\n            onClick={selectNone}\n            type=\"button\"\n            className=\"special\"\n          >\n            None\n          </button>\n        </p>\n        <div id=\"app\">\n          {selectedPokemonCards.map((card) => (\n            <Card key={card.id} pokemonCard={card} />\n          ))}\n        </div>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport const getStaticProps: GetStaticProps<IndexProps> = async () => {\n  const pokemonCards = await getPokemonCards();\n  const pokemonTypes = await getPokemonTypes();\n  return {\n    props: {\n      pokemonCards,\n      pokemonTypes,\n    },\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}
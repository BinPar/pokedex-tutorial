{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nimport Card from '../components/Card';\nimport getPokemonCards from '../logic/pokemonCards';\nimport getPokemonTypes from '../logic/getPokemonTypes';\nimport { getLastTypes, setLastTypes } from '../logic/persistentTypes';\n\nconst Index = ({\n  pokemonCards,\n  pokemonTypes\n}) => {\n  if (!getLastTypes()) {\n    setLastTypes(pokemonTypes);\n  }\n\n  const {\n    0: selectedTypes,\n    1: setSelectedTypes\n  } = useState(getLastTypes());\n  setLastTypes(selectedTypes);\n\n  const togglePokemonType = (type, ev) => {\n    if (ev.ctrlKey || ev.shiftKey) {\n      if (selectedTypes.includes(type)) {\n        setSelectedTypes(types => [...types].filter(item => item !== type));\n      } else {\n        setSelectedTypes(types => {\n          const newTypes = [...types];\n          newTypes.push(type);\n          return newTypes;\n        });\n      }\n    } else {\n      setSelectedTypes(() => [type]);\n    }\n  };\n\n  const selectedPokemonCards = pokemonCards.filter(card => card.types.some(item => selectedTypes.includes(item)));\n\n  const selectAll = () => {\n    setSelectedTypes([...pokemonTypes]);\n  };\n\n  const selectNone = () => {\n    setSelectedTypes([]);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"BinPar Pokedex\")), __jsx(\"main\", null, __jsx(\"h1\", null, \"BinPar Pokedex\"), __jsx(\"p\", {\n    className: \"pokemonTypes\"\n  }, pokemonTypes.map(type => __jsx(\"button\", {\n    onClick: ev => togglePokemonType(type, ev),\n    className: selectedTypes.includes(type) ? 'on' : 'off',\n    type: \"button\",\n    key: type\n  }, type)), __jsx(\"button\", {\n    onClick: selectAll,\n    type: \"button\",\n    className: \"special\"\n  }, \"All\"), __jsx(\"button\", {\n    onClick: selectNone,\n    type: \"button\",\n    className: \"special\"\n  }, \"None\")), __jsx(\"div\", {\n    id: \"app\"\n  }, selectedPokemonCards.map(card => __jsx(Card, {\n    key: card.id,\n    pokemonCard: card\n  })))));\n};\n\nexport const getStaticProps = async () => {\n  const pokemonCards = await getPokemonCards();\n  const pokemonTypes = await getPokemonTypes();\n  return {\n    props: {\n      pokemonCards,\n      pokemonTypes\n    }\n  };\n};\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}